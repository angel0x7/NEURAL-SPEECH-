// File: cnn.cpp
#include "cnn.h"
#include <Arduino.h>
#include <math.h>

// --- replace these with your exported weights ---
const float kernel1[3][3] = {
  { 0.445234f, 2.250360f, 2.014976f },
  { 1.164189f, 1.990607f, 1.962546f },
  { 0.767538f, 2.276647f, 2.584497f },
};

const float kernel2[3][3] = {
  { -0.287902f, -0.522484f, 0.101174f },
  { -0.599932f, 0.230782f, 1.155232f },
  { -0.931063f, 0.339129f, 1.192678f },
};

const float weights_fc1[20][36] = {
  { -0.102752f, 0.220274f, 0.455978f, 0.165306f, 0.218611f, -0.008049f, 0.399011f, -0.552266f, -0.393130f, 0.220158f, -0.400772f, 0.165201f, -0.026495f, -0.563581f, 0.175976f, 0.227494f, -0.439185f, 0.199914f, -0.076977f, 0.526668f, -0.311111f, -0.246801f, 0.511999f, -0.161673f, -0.421589f, 0.054257f, -0.324876f, 0.204123f, 0.006942f, 0.267472f, 0.223681f, -0.044887f, -0.011262f, 0.321635f, -0.016103f, 0.089664f },
  { -0.008932f, -0.179069f, 0.280743f, 0.054505f, 0.303852f, -0.044966f, -0.146235f, -0.172992f, 0.263704f, -0.013253f, 0.094714f, 0.266240f, -0.227287f, 0.287709f, 0.035707f, -0.191996f, 0.084736f, 0.040088f, 0.222113f, -0.106132f, 0.154947f, 0.042190f, -0.082558f, -0.155008f, -0.155493f, -0.215762f, -0.264737f, 0.218783f, 0.256417f, -0.095560f, -0.218551f, 0.282787f, -0.168609f, -0.254404f, -0.064564f, 0.073621f },
  { -0.168919f, 0.179280f, -0.209045f, 0.047512f, -0.294701f, -0.247717f, 0.169234f, 0.180497f, 0.009512f, 0.353574f, 0.000891f, 0.273215f, -0.110220f, 0.165493f, -0.013772f, -0.007244f, -0.421842f, -0.486003f, -0.055711f, -0.536824f, -0.103736f, -0.231054f, -0.289167f, -0.045386f, 0.251365f, 0.229590f, 0.310124f, 0.128073f, 0.408004f, 0.174390f, 0.211372f, 0.139873f, 0.224492f, -0.125922f, -0.266806f, 0.316762f },
  { 0.166798f, 0.205519f, -0.028915f, 0.486323f, 0.019382f, -0.257280f, 0.367452f, 0.114770f, -0.643309f, -0.142178f, -0.159725f, -0.262876f, -0.074602f, 0.119970f, -0.121164f, 0.147395f, 0.496410f, -0.197716f, -0.257082f, 0.350032f, -0.419342f, -0.198369f, 0.279284f, -0.385092f, -0.286212f, 0.127610f, 0.401202f, -0.316860f, 0.453621f, 0.311190f, -0.090545f, 0.337121f, 0.145719f, 0.037846f, 0.451981f, -0.195991f },
  { 0.228845f, 0.136714f, -0.093478f, 0.325784f, 0.265597f, 0.147926f, -0.054928f, 0.584545f, 0.852266f, -0.309939f, 0.350619f, 0.556933f, -0.113112f, 0.161704f, -0.100546f, -0.147707f, 0.159318f, -0.580368f, -0.027918f, 0.013931f, -0.271675f, -0.327598f, 0.303907f, -0.121726f, -0.217678f, 0.662702f, -0.114912f, 0.030545f, 0.206987f, -0.037711f, -0.116362f, 0.211280f, 0.106576f, 0.166460f, 0.205930f, 0.042392f },
  { -0.151557f, -0.265850f, 0.020983f, 0.112295f, -0.145743f, -0.229068f, -0.090992f, 0.050014f, -0.085368f, -0.055667f, -0.158882f, 0.200564f, 0.234684f, 0.283472f, 0.237760f, -0.256320f, -0.154941f, 0.205663f, -0.267846f, -0.045282f, 0.196659f, 0.194967f, 0.111339f, 0.311558f, 0.126169f, 0.095126f, -0.305075f, 0.291520f, 0.305920f, -0.053156f, -0.262651f, -0.157560f, -0.037741f, -0.293610f, -0.270270f, 0.167424f },
  { -0.241946f, 0.080350f, -0.244623f, -0.240232f, 0.081623f, -0.071057f, -0.087705f, -0.038391f, 0.274351f, 0.256251f, 0.009670f, 0.103691f, -0.302922f, 0.233406f, 0.072344f, -0.042292f, -0.139416f, -0.196656f, 0.245366f, -0.000711f, -0.024430f, -0.020146f, -0.303415f, -0.278096f, -0.218088f, 0.077141f, -0.170612f, 0.308689f, -0.005758f, -0.240142f, 0.212540f, 0.101502f, 0.185740f, 0.080072f, 0.044910f, -0.016169f },
  { -0.275865f, 0.075804f, 0.152394f, 0.250672f, 0.024094f, 0.145708f, 0.576623f, -0.666017f, -0.096127f, 0.159483f, -0.787010f, -0.254778f, 0.237919f, -0.403951f, -0.005412f, 0.204914f, -0.234896f, 0.245447f, 0.047863f, -0.241774f, -0.048972f, 0.206761f, -0.322746f, 0.018434f, 0.076536f, -0.169535f, -0.323222f, -0.179810f, 0.117778f, 0.252113f, -0.149153f, -0.237552f, -0.269881f, 0.080540f, -0.046900f, 0.193846f },
  { -0.301485f, -0.208031f, 0.183282f, 0.261928f, 0.120274f, 0.238355f, -0.093301f, 0.143489f, -0.180460f, -0.266106f, 0.180677f, 0.041638f, -0.041225f, 0.127310f, -0.067571f, -0.243814f, -0.189296f, 0.250394f, 0.284377f, -0.287478f, -0.148450f, -0.252590f, -0.019554f, 0.313769f, 0.261930f, 0.173900f, -0.238457f, 0.047736f, -0.106378f, 0.192224f, 0.128524f, 0.202959f, -0.265027f, -0.227058f, 0.032157f, -0.103204f },
  { 0.307383f, -0.065074f, 0.066239f, 0.055605f, -0.246864f, -0.186977f, -0.457828f, -0.179238f, 0.089127f, 0.040855f, -0.124691f, 0.002130f, 0.225128f, -0.138965f, 0.018955f, -0.077472f, -0.246413f, 0.444534f, -0.422538f, -0.332440f, 0.294636f, -0.197688f, -0.369196f, 0.556541f, 0.472613f, 0.111869f, 0.269172f, -0.003476f, 0.250294f, 0.347474f, 0.182005f, -0.163798f, 0.247365f, 0.312884f, -0.289301f, 0.248039f },
  { 0.463049f, 0.076490f, -0.206749f, -0.302055f, -0.042249f, 0.073734f, 0.075392f, 0.432509f, -0.582126f, -0.132667f, 1.103754f, -0.246203f, -0.476474f, 0.384992f, -0.280842f, 0.147472f, -0.317345f, 0.269123f, 0.242986f, -0.694959f, 0.038172f, 0.473768f, -0.496049f, 0.219567f, 0.444605f, -0.192604f, 0.091896f, 0.104106f, 0.148209f, -0.341865f, -0.216679f, 0.166779f, -0.000286f, 0.089327f, 0.124020f, -0.120564f },
  { 0.073392f, 0.064278f, -0.069727f, -0.115938f, -0.221305f, 0.044722f, -0.153607f, 0.117616f, 0.261400f, -0.012052f, -0.251516f, -0.291294f, -0.148944f, -0.133623f, -0.016215f, 0.109014f, -0.244846f, -0.288392f, 0.018021f, -0.273705f, -0.226870f, -0.189524f, 0.284790f, 0.314824f, -0.216397f, 0.238622f, -0.014543f, 0.049677f, -0.318237f, 0.125659f, -0.082335f, -0.179418f, 0.319709f, -0.022277f, 0.146000f, 0.318470f },
  { 0.011251f, 0.099915f, 0.132556f, -0.258787f, 0.053760f, 0.077930f, 0.055083f, 0.693919f, -0.520656f, 0.031223f, 0.947653f, -0.875139f, -0.271402f, 0.995053f, -0.638179f, -0.512450f, 0.703917f, -0.536326f, 0.224422f, 0.195964f, -0.406090f, 0.017910f, 0.278936f, -0.436623f, 0.001414f, 0.186358f, 0.126201f, 0.372431f, -0.048777f, -0.054222f, 0.014282f, 0.234178f, 0.325610f, 0.309921f, -0.104512f, 0.164700f },
  { 0.404266f, 0.463481f, -0.029719f, -0.198770f, 0.143670f, -0.202630f, -0.129469f, -0.165916f, -0.030941f, 0.319049f, -0.127526f, 0.479939f, -0.272699f, -0.088456f, -0.184341f, -0.111190f, 0.887615f, -0.135899f, 0.021795f, 1.162448f, -0.301495f, -0.109967f, 0.456811f, 0.208184f, -0.373469f, -0.041130f, 0.087376f, -0.157041f, 0.081901f, 0.290517f, -0.110752f, -0.170455f, -0.296360f, 0.135631f, 0.142779f, -0.073032f },
  { -0.273364f, 0.249402f, -0.327862f, -0.289946f, 0.322860f, 0.303758f, 0.044130f, -0.004667f, 0.309690f, 0.349772f, -0.730685f, 0.453366f, -0.166347f, -0.370198f, 0.212985f, 0.113650f, -0.166699f, 0.397962f, 0.484834f, 0.154909f, 0.605484f, 0.533596f, 0.393800f, 0.302461f, 0.216020f, -0.088595f, 0.090717f, 0.004026f, -0.461688f, -0.433545f, -0.071761f, -0.018588f, -0.075284f, -0.003105f, 0.274085f, 0.134251f },
  { -0.303469f, -0.293274f, 0.297369f, -0.306123f, -0.061555f, -0.321716f, 0.002054f, -0.047434f, -0.273283f, -0.303857f, 0.125630f, 0.186166f, -0.302713f, 0.320445f, 0.114067f, -0.123603f, 0.132979f, -0.185648f, 0.237916f, -0.323200f, -0.297761f, 0.165493f, 0.070002f, -0.272386f, 0.221044f, -0.035857f, -0.283843f, 0.321337f, -0.105126f, -0.140787f, -0.178099f, 0.246552f, 0.298295f, -0.106110f, 0.087288f, 0.152338f },
  { -0.232585f, 0.413885f, -0.066232f, 0.372536f, -0.139964f, 0.036574f, 0.043163f, 0.499507f, -0.225992f, -0.112993f, 0.679840f, -0.731272f, -0.148183f, 0.495854f, -0.334086f, -0.203977f, 0.358753f, -0.563803f, 0.063844f, 0.031102f, -0.387786f, -0.146303f, 0.141097f, -0.134823f, 0.006759f, 0.448333f, -0.267889f, -0.071170f, 0.261048f, 0.036261f, 0.080544f, 0.402282f, 0.341486f, 0.328840f, 0.466411f, -0.185375f },
  { 0.022849f, 0.218874f, -0.218822f, -0.102268f, 0.251888f, 0.077572f, -0.307267f, -0.059665f, -0.000130f, 0.102585f, -0.005250f, -0.100275f, 0.075331f, -0.078777f, -0.031978f, 0.178345f, 0.160843f, 0.028626f, -0.332382f, -0.249595f, -0.295031f, -0.183153f, 0.172254f, -0.256816f, -0.091620f, 0.011817f, 0.290546f, 0.140742f, -0.107152f, 0.037815f, -0.196027f, -0.027653f, -0.041457f, 0.035352f, 0.259710f, 0.263924f },
  { -0.242038f, 0.142005f, -0.227259f, 0.152875f, -0.268252f, -0.188738f, 0.071799f, 0.235300f, 0.159713f, 0.032763f, 0.117060f, 0.287149f, -0.047420f, -0.060347f, -0.284416f, 0.213125f, -0.251941f, -0.258661f, -0.288751f, -0.151640f, 0.265080f, -0.156157f, -0.212663f, -0.151483f, 0.240510f, -0.190204f, -0.095761f, 0.001763f, 0.220721f, 0.043244f, -0.308465f, 0.192944f, 0.122125f, 0.072447f, -0.093882f, 0.123147f },
  { 0.351396f, -0.339779f, -0.145402f, 0.172620f, -0.002758f, -0.249564f, -0.145700f, -0.165266f, 0.381835f, -0.040292f, -0.670292f, 0.783787f, 0.011186f, -0.536159f, 0.533196f, 0.187827f, 0.052172f, 0.367647f, -0.335186f, 0.026839f, 0.221598f, -0.129620f, -0.115513f, 0.392727f, -0.067422f, 0.197571f, 0.443461f, 0.164144f, 0.295512f, -0.108137f, 0.233038f, 0.042502f, 0.012325f, -0.189124f, 0.242489f, 0.322856f },
};

const float biases_fc1[20] = { 0.037847f, -0.014457f, -0.079978f, 0.071005f, 0.091735f, 0.000000f, 0.000000f, -0.073495f, 0.000000f, -0.005211f, -0.031287f, -0.016470f, 0.033544f, 0.003826f, 0.009452f, 0.000000f, 0.061946f, -0.017844f, 0.000000f, 0.036148f };

const float weights_fc2[10][20] = {
  { -1.088907f, 0.052531f, 0.289727f, -0.790415f, -0.706903f, -0.211648f, -0.079187f, -0.808789f, -0.304869f, 0.406563f, 0.744860f, -0.078203f, 0.532233f, -0.704933f, 0.200009f, -0.287607f, -0.343360f, -0.316870f, 0.323534f, 0.007659f },
  { 0.393020f, -0.259643f, -1.230595f, 0.092055f, -0.163302f, 0.019675f, 0.081698f, 0.170001f, 0.239686f, -0.285544f, -0.449574f, -0.399463f, -0.917489f, 0.774138f, 0.263048f, 0.210167f, -1.053856f, -0.175351f, 0.405481f, 0.130996f },
  { 0.554719f, -0.059329f, 0.166429f, 0.515620f, -0.840581f, -0.349028f, -0.327588f, 0.491216f, 0.426155f, 0.227648f, 0.065643f, 0.085063f, 0.044218f, -0.378964f, -0.293975f, -0.154368f, 0.100828f, 0.417181f, -0.415002f, 0.102570f },
  { 0.139524f, -0.173234f, 0.502140f, -0.259241f, 0.388463f, -0.189490f, -0.205439f, -0.400127f, -0.025916f, 0.521887f, 0.438293f, 0.025446f, -0.221900f, -0.785559f, -0.442428f, 0.040237f, -0.173235f, 0.419715f, 0.292023f, 0.074120f },
  { -0.296364f, -0.109811f, 0.175479f, 0.371197f, 0.476568f, 0.389807f, -0.262357f, -1.304510f, 0.164783f, -0.344244f, 0.480701f, 0.302149f, 0.873178f, 0.265809f, -0.503344f, 0.216346f, 0.686377f, -0.158874f, 0.133731f, -0.153440f },
  { 0.376858f, 0.311139f, 0.307684f, 0.240906f, 0.170107f, 0.241934f, -0.296142f, 1.040794f, -0.286657f, -0.360689f, -0.249613f, -0.318193f, -1.238648f, -0.977693f, 0.185512f, 0.096463f, -0.192158f, 0.172764f, -0.074523f, -0.093299f },
  { -0.025089f, 0.160059f, -0.458896f, 0.708487f, 0.637799f, -0.108349f, 0.210732f, -0.781416f, -0.241394f, 0.414205f, -0.589709f, -0.263237f, -0.708066f, -0.239797f, 0.021614f, 0.272074f, 0.047165f, 0.051284f, -0.335458f, 0.375692f },
  { -0.038687f, -0.262503f, 0.394547f, -0.266361f, -0.165694f, 0.161392f, 0.059943f, 0.569622f, -0.122402f, 0.283717f, -0.874475f, 0.379456f, -1.999865f, 0.229878f, 0.108338f, 0.232440f, -0.898722f, 0.184792f, -0.231465f, 0.417231f },
  { -0.364643f, 0.216140f, -0.279652f, 0.354334f, 0.109682f, -0.261423f, 0.095651f, 0.255584f, -0.256728f, -0.514341f, 0.417702f, 0.346489f, 0.929917f, -0.081356f, 0.165508f, 0.375990f, 0.858965f, -0.314080f, 0.042527f, -0.792757f },
  { 0.392230f, -0.414232f, 0.118794f, 0.291346f, 0.313165f, 0.186696f, -0.444874f, -0.360564f, -0.228984f, -0.097906f, -0.536485f, 0.298447f, 0.616634f, 0.475318f, -0.397059f, 0.195354f, 0.575818f, 0.236399f, -0.428807f, -0.110519f },
};

const float biases_fc2[10] = { -0.031442f, 0.031337f, 0.038962f, -0.018614f, -0.002297f, -0.001040f, 0.152932f, -0.088260f, -0.028547f, -0.062798f };
// ------------------------------------------------

// 1) Conv same + ReLU
void conv2d_same_relu_1(const float in[DATA_ROWS][DATA_COLS], float out[DATA_ROWS][DATA_COLS]) {
    const int pad = KERNEL_SIZE/2;
    for (int i=0; i<DATA_ROWS; i++) {
        for (int j=0; j<DATA_COLS; j++) {
            float sum = 0;
            for (int ki=0; ki<KERNEL_SIZE; ki++) for (int kj=0; kj<KERNEL_SIZE; kj++) {
                int ii = i + ki - pad;
                int jj = j + kj - pad;
                float val = (ii>=0 && ii<DATA_ROWS && jj>=0 && jj<DATA_COLS) ? in[ii][jj] : 0;
                sum += val * kernel1[ki][kj];
            }
            out[i][j] = sum>0 ? sum : 0;
        }
    }
}

// 2) Pooling 2×2
void pool2d_1(const float in[DATA_ROWS][DATA_COLS], float out[ROWS_P1][COLS_P1]) {
    for (int i=0; i<ROWS_P1; i++) for (int j=0; j<COLS_P1; j++) {
        float m = -INFINITY;
        for (int pi=0; pi<POOL_SIZE; pi++) for (int pj=0; pj<POOL_SIZE; pj++) {
            float v = in[i*POOL_SIZE+pi][j*POOL_SIZE+pj];
            if (v>m) m=v;
        }
        out[i][j] = m;
    }
}

// 3) Conv same + ReLU second layer
void conv2d_same_relu_2(const float in[ROWS_P1][COLS_P1], float out[ROWS_P1][COLS_P1]) {
    const int pad = KERNEL_SIZE/2;
    for (int i=0; i<ROWS_P1; i++) {
        for (int j=0; j<COLS_P1; j++) {
            float sum = 0;
            for (int ki=0; ki<KERNEL_SIZE; ki++) for (int kj=0; kj<KERNEL_SIZE; kj++) {
                int ii = i + ki - pad;
                int jj = j + kj - pad;
                float val = (ii>=0 && ii<ROWS_P1 && jj>=0 && jj<COLS_P1) ? in[ii][jj] : 0;
                sum += val * kernel2[ki][kj];
            }
            out[i][j] = sum>0 ? sum : 0;
        }
    }
}

// 4) Pooling second layer
void pool2d_2(const float in[ROWS_P1][COLS_P1], float out[ROWS_P2][COLS_P2]) {
    for (int i=0; i<ROWS_P2; i++) for (int j=0; j<COLS_P2; j++) {
        float m = -INFINITY;
        for (int pi=0; pi<POOL_SIZE; pi++) for (int pj=0; pj<POOL_SIZE; pj++) {
            float v = in[i*POOL_SIZE+pi][j*POOL_SIZE+pj];
            if (v>m) m=v;
        }
        out[i][j] = m;
    }
}

// 5) Flatten
void flatten2d(const float in[ROWS_P2][COLS_P2], float out[FLAT_SIZE]) {
    int idx=0;
    for (int i=0; i<ROWS_P2; i++) for (int j=0; j<COLS_P2; j++) out[idx++] = in[i][j];
}

// 6) Full CNN pipeline
void cnn(const float input[DATA_ROWS][DATA_COLS], float output[FLAT_SIZE]) {
    static float buf1[DATA_ROWS][DATA_COLS];
    static float buf2[ROWS_P1][COLS_P1];
    static float buf3[ROWS_P1][COLS_P1];
    static float buf4[ROWS_P2][COLS_P2];

    conv2d_same_relu_1(input, buf1);
    pool2d_1(buf1, buf2);
    conv2d_same_relu_2(buf2, buf3);
    pool2d_2(buf3, buf4);
    flatten2d(buf4, output);
}

// Dense layer with ReLU
void dense_relu(const float in[FLAT_SIZE], float out[N_HIDDEN]) {
    for (int j = 0; j < N_HIDDEN; j++) {
        float sum = biases_fc1[j];
        // weights_fc1 est [N_HIDDEN][FLAT_SIZE], on indexe [j][i]
        for (int i = 0; i < FLAT_SIZE; i++) {
            sum += in[i] * weights_fc1[j][i];
        }
        out[j] = sum > 0.0f ? sum : 0.0f;
    }
}

// Compute logits for output classes
void dense_logits(const float in[N_HIDDEN], float out[N_CLASSES]) {
    for (int c = 0; c < N_CLASSES; c++) {
        float sum = biases_fc2[c];
        // weights_fc2 est [N_CLASSES][N_HIDDEN], on indexe [c][j]
        for (int j = 0; j < N_HIDDEN; j++) {
            sum += in[j] * weights_fc2[c][j];
        }
        out[c] = sum;
    }
}


// Argmax utility
int argmax(const float arr[], int len) {
    int best=0;
    float maxv=arr[0];
    for (int i=1; i<len; i++) if (arr[i]>maxv) { maxv=arr[i]; best=i; }
    return best;
}